(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{375:function(e,t,r){"use strict";r.r(t);var s=r(45),i=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"digger-yml-reference"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#digger-yml-reference"}},[e._v("#")]),e._v(" digger.yml reference")]),e._v(" "),r("div",{staticClass:"custom-block warning"},[r("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),r("p",[e._v("The structure of this digger.yml file is subject to change in future version of digger.")])]),e._v(" "),r("h2",{attrs:{id:"structure"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#structure"}},[e._v("#")]),e._v(" Structure")]),e._v(" "),r("p",[e._v("There are two main top-level parts of digger.yml, "),r("code",[e._v("project")]),e._v(" and "),r("code",[e._v("services")]),e._v(". The project section contains metadata about the active project. The services section contains a list of service metadata. In the snippet bellow we capture the main elements of a typical digger.yml along with comments to explain each field")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("project:\n  name: projectname\nservices:\n  svc:\n    service_name: svc1 # The service name, in most cases it will be the same as the toplevel key\n    path: . # where the service lives, a path relative to the root repo\n    env_files: [] # currently unused, in future will be used to point .env files \n    publicly_accissible: true # whether this is an external or internal service\n    service_type: container # the type of the service\n    container_port: 5000 # the port which the container listens in. NOTE this is the container port NOT the port exposed to the host\n    health_check: /api/v1/hello # An unauthenticated path, required by loadbalancers\n    dockerfile: ./Dockerfile # path to dockerfile relative to root repository\n    resources: {} # currently unused, in the future will indicate resources that the service needs such as databases\n    dependencies: {} # currently unused, in the future will point to other services which this service depends on \n")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);