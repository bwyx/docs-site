(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{372:function(e,n,i){"use strict";i.r(n);var t=i(45),s=Object(t.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"ci-cd-pipeline-gitlab"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ci-cd-pipeline-gitlab"}},[this._v("#")]),this._v(" CI/CD pipeline Gitlab")]),this._v(" "),n("p",[this._v("You can use digger CLI within your CI/CD pipeline within your favourite tools such as Github Actions, CircliCI or TravicCI. In the snippet bellow we show an example of a gitlab ci. We are using the offical docker image of digger to run digger commands. This comes with all dg dependencies included in the image")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('default:\n  image: public.ecr.aws/g1x6q1x1/dg:v0.2.17\n\n\nvariables:\n  # You need to configure the following variables as gitlab secrets\n  # DIGGER_TOKEN: ${{DIGGER_TOKEN}}\n  # DIGGER_AWS_KEY: ${{ secrets.DIGGER_AWS_KEY }}\n  # DIGGER_AWS_SECRET: ${{ secrets.DIGGER_AWS_SECRET }}\n  BACKEND_ENDPOINT: "https://backend.digger.dev"\n  WEBAPP_ENDPOINT: "https://app.digger.dev"\n  SERVICE: platform\n  TAG_VERSION: $CI_COMMIT_SHORT_SHA\n  # settings for docker-in-docker\n  DOCKER_HOST: tcp://docker:2376\n  DOCKER_TLS_CERTDIR: "/certs"\n  DOCKER_TLS_VERIFY: 1\n  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"\n  \n# This is needed to allow docker-in-docker\nservices:\n  - docker:19.03.12-dind\n\nrelease-staging:\n  stage: build\n  variables:\n    # This is the name of your environment\n    DG_ENV: "staging" \n  only:\n    - develop\n  script:\n    - echo "> Building docker image"\n    - dg env build "$DG_ENV" --service $SERVICE --tag $TAG_VERSION --context .\n    - echo "> Pushing docker image to ECR"\n    - dg env push "$DG_ENV" --service $SERVICE --tag $TAG_VERSION --aws-key "$DIGGER_AWS_KEY" --aws-secret "$DIGGER_AWS_SECRET"\n    - echo "> Releasing docker image"\n    - dg env release "$DG_ENV" --service $SERVICE --tag $TAG_VERSION --aws-key "$DIGGER_AWS_KEY" --aws-secret "$DIGGER_AWS_SECRET"\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);